import React, { useEffect, useState } from "react";
import "./App.css";

type Todo = {
  id: number;
  title: string;
  completed: boolean;
};

export default function App() {
  const [todos, setTodos] = useState<Todo[]>([]);
  const [title, setTitle] = useState("");
  const [loading, setLoading] = useState(false);

  // üîΩ STATE M·ªöI: Theo d√µi todo ƒëang ƒë∆∞·ª£c ch·ªânh s·ª≠a
  const [editingState, setEditingState] = useState<{
    id: number;
    title: string;
  } | null>(null);

  // üîπ L·∫•y danh s√°ch todo t·ª´ backend
  async function fetchTodos() {
    setLoading(true);
    const res = await fetch("/api/todos")
      .then((r) => r.json())
      .catch(() => ({ todos: [] }));
    setTodos(res.todos || []);
    setLoading(false);
  }

  // üîπ Th√™m todo m·ªõi
  async function addTodo(e: React.FormEvent) {
    e.preventDefault();
    if (!title.trim()) return;
    await fetch("/api/todos", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ title }),
    });
    setTitle("");
    fetchTodos();
  }

  // üîΩ H√ÄM M·ªöI: C·∫≠p nh·∫≠t (S·ª≠a) todo
  async function updateTodo(id: number, newTitle: string) {
    if (!newTitle.trim()) {
      // N·∫øu ti√™u ƒë·ªÅ m·ªõi r·ªóng, h·ªßy b·ªè vi·ªác s·ª≠a
      setEditingState(null);
      return;
    }
    await fetch(`/api/todos/${id}`, {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ title: newTitle }),
    });
    setEditingState(null); // Tho√°t ch·∫ø ƒë·ªô ch·ªânh s·ª≠a
    fetchTodos(); // T·∫£i l·∫°i danh s√°ch
  }

  // üîπ Xo√° todo
  async function deleteTodo(id: number) {
    await fetch(`/api/todos/${id}`, { method: "DELETE" });
    fetchTodos();
  }

  // üîπ ƒê·ªïi tr·∫°ng th√°i ho√†n th√†nh
  async function toggleTodo(id: number) {
    // Kh√¥ng cho ph√©p toggle khi ƒëang s·ª≠a
    if (editingState && editingState.id === id) return;
    await fetch(`/api/todos/${id}/toggle`, { method: "PATCH" });
    fetchTodos();
  }

  useEffect(() => {
    fetchTodos();
  }, []);

  // H√†m x·ª≠ l√Ω khi nh·∫•n n√∫t L∆∞u
  const handleSave = () => {
    if (editingState) {
      updateTodo(editingState.id, editingState.title);
    }
  };

  // H√†m x·ª≠ l√Ω khi thay ƒë·ªïi n·ªôi dung trong √¥ input s·ª≠a
  const handleEditChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (editingState) {
      setEditingState({ ...editingState, title: e.target.value });
    }
  };

  return (
    <div className="page">
      <div className="background-shapes">
        <div className="shape shape1"></div>
        <div className="shape shape2"></div>
        <div className="shape shape3"></div>
      </div>

      <div className="container">
        <h1 className="hero-title">To-Do List üöÄ</h1>
        <p className="hero-subtitle">Qu·∫£n l√Ω c√¥ng vi·ªác h·∫±ng ng√†y c·ªßa b·∫°n</p>

        {/* Form th√™m */}
        <form onSubmit={addTodo} className="form">
          <input
            placeholder="Nh·∫≠p vi·ªác c·∫ßn l√†m..."
            value={title}
            onChange={(e) => setTitle(e.target.value)}
          />
          <button type="submit">Th√™m</button>
        </form>

        {/* Danh s√°ch todo */}
        <ul className="item-list">
          {loading && <li>ƒêang t·∫£i...</li>}
          {!loading && todos.length === 0 && <li>Ch∆∞a c√≥ c√¥ng vi·ªác n√†o üéâ</li>}
          {todos.map((t) => (
            <li
              key={t.id}
              style={{
                display: "flex",
                alignItems: "center",
                justifyContent: "space-between",
                gap: 8,
              }}
            >
              {/* üîΩ LOGIC RENDER M·ªöI: Hi·ªÉn th·ªã √¥ input ho·∫∑c text */}
              {editingState && editingState.id === t.id ? (
                // --- Ch·∫ø ƒë·ªô S·ª¨A ---
                <>
                  <input
                    type="text"
                    value={editingState.title}
                    onChange={handleEditChange}
                    onKeyDown={(e) => e.key === "Enter" && handleSave()} // Cho ph√©p nh·∫•n Enter ƒë·ªÉ l∆∞u
                    autoFocus
                    className="edit-input"
                  />
                  <div className="button-group">
                    <button
                      onClick={handleSave}
                      className="btn-action btn-save"
                    >
                      L∆∞u
                    </button>
                    <button
                      onClick={() => setEditingState(null)}
                      className="btn-action btn-cancel"
                    >
                      H·ªßy
                    </button>
                  </div>
                </>
              ) : (
                // --- Ch·∫ø ƒë·ªô XEM (b√¨nh th∆∞·ªùng) ---
                <>
                  <span
                    style={{
                      textDecoration: t.completed ? "line-through" : "none",
                      color: t.completed ? "#ccc" : "white",
                      cursor: "pointer",
                      // üîΩ Th√™m style ƒë·ªÉ ti√™u ƒë·ªÅ kh√¥ng b·ªã tr√†n
                      wordBreak: "break-all",
                      flexGrow: 1,
                      textAlign: "left",
                    }}
                    onClick={() => toggleTodo(t.id)}
                  >
                    {t.title}
                  </span>
                  <div className="button-group">
                    {/* N√∫t S·ª≠a */}
                    <button
                      onClick={() =>
                        setEditingState({ id: t.id, title: t.title })
                      }
                      className="btn-action btn-edit"
                    >
                      ‚úèÔ∏è
                    </button>
                    {/* N√∫t X√≥a (ƒë√£ b·ªè inline style v√† d√πng class) */}
                    <button
                      onClick={() => deleteTodo(t.id)}
                      className="btn-action btn-delete"
                    >
                      ‚úï
                    </button>
                  </div>
                </>
              )}
            </li>
          ))}
        </ul>

        {/* Gi·ªØ l·∫°i ph·∫ßn hi·ªáu ·ª©ng ƒë·∫πp */}
        <div className="features">{/* ... (kh√¥ng thay ƒë·ªïi) ... */}</div>
      </div>
    </div>
  );
}